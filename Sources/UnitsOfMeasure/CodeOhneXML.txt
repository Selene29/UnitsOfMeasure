This code was written when generic operators were not yet available in C#. It is now possible to write this code much more elegantly, but I have not yet had the time to update it. 
site: https://www.thomasclaudiushuber.com/2023/01/24/csharp-11-generic-math/
in the first step i want you to summarize what the code hopes to achive.
Then you should write the idea in code based on my code.
You should design the classes so that this system is extensible.

ConstantHolder.cs:
internal static class Constants<TNumber>
where TNumber : IParsable<TNumber>
{
internal static readonly TNumber Number1000;
internal static readonly TNumber Number0_1;
internal static readonly TNumber Number0_01;
internal static readonly TNumber Number0_001;
internal static readonly TNumber Number0_000001;
internal static readonly TNumber Number1609_34;
internal static readonly TNumber Number60;
internal static readonly TNumber Number3600;
internal static readonly TNumber Number0_0174;

static TNumber FromString(string forFloat, string forInt)
{
var isFloating = typeof(TNumber) == typeof(float) || typeof(TNumber) == typeof(double) || typeof(TNumber) == typeof(System.Numerics.Complex);
return isFloating
? TNumber.Parse(forFloat, CultureInfo.InvariantCulture)
: TNumber.Parse(forInt, null);
}

static Constants()
{
Number1000 = TNumber.Parse("1000", null);
Number1609_34 = FromString("1609.34", "1609");
Number60 = TNumber.Parse("60", null);
Number3600 = TNumber.Parse("3600", null);
Number0_0174 = FromString("0.0174", "0");
Number0_1 = FromString("0.1", "0");
Number0_01 = FromString("0.01", "0");
Number0_001 = FromString("0.001", "0");
Number0_000001 = FromString("0.000001", "0");
}
}

Operations.cs:
public static class Ops
{
[MethodImpl(MethodImplOptions.AggressiveInlining)]
public static Unit<Div<T1, T2, T1Base, T2Base, TNumber>, Div<T1Base, T2Base, T1Base, T2Base, TNumber>, TNumber> 
Divide<T1, T2, T1Base, T2Base, TNumber>(this Unit<T1, T1Base, TNumber> a, Unit<T2, T2Base, TNumber> b)
where T1Base : struct, IBaseUnit<T1Base, TNumber>
where T2Base : struct, IBaseUnit<T2Base, TNumber>
where T1 : struct, IBaseUnit<T1Base, TNumber>
where T2 : struct, IBaseUnit<T2Base, TNumber>
where TNumber : IDivisionOperators<TNumber, TNumber, TNumber>,
IMultiplyOperators<TNumber, TNumber, TNumber>
=> new(a.Float / b.Float);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
public static Unit<T1, TBase, TNumber> 
Add<T1, T2, TBase, TNumber>(this Unit<T1, TBase, TNumber> a, Unit<T2, TBase, TNumber> b)
where TBase : struct, IBaseUnit<TBase, TNumber>
where T1 : struct, IBaseUnit<TBase, TNumber>
where T2 : struct, IBaseUnit<TBase, TNumber>
where TNumber : IDivisionOperators<TNumber, TNumber, TNumber>, 
IAdditionOperators<TNumber, TNumber, TNumber>, 
IMultiplyOperators<TNumber, TNumber, TNumber>
=> 
typeof(T1) == typeof(T2)
? new(a.Float + b.Float)
: new((a.Float * new T1().Base + b.Float * new T2().Base) / new T1().Base);

[MethodImpl(MethodImplOptions.AggressiveInlining)]
public static Unit<Squared<T, TBase, TNumber>, Squared<TBase, TBase, TNumber>, TNumber>
Square<T, TBase, TNumber>(this Unit<T, TBase, TNumber> a)
where TBase : struct, IBaseUnit<TBase, TNumber>
where T : struct, IBaseUnit<TBase, TNumber>
where TNumber : IMultiplyOperators<TNumber, TNumber, TNumber>,
IDivisionOperators<TNumber, TNumber, TNumber>
=> new(a.Float * a.Float);
}

public struct Squared<T, TBase, TNumber>
: IBaseUnit<Squared<TBase, TBase, TNumber>, TNumber>
where T : struct, IBaseUnit<TBase, TNumber>
where TBase : struct, IBaseUnit<TBase, TNumber>
where TNumber : IMultiplyOperators<TNumber, TNumber, TNumber>
{
public TNumber Base => new T().Base * new T().Base;

public string Postfix => $"({new T().Postfix})^2";
}

public struct Div<T1, T2, T1Base, T2Base, TNumber>
: IBaseUnit<Div<T1Base, T2Base, T1Base, T2Base, TNumber>, TNumber>
where T1Base : struct, IBaseUnit<T1Base, TNumber>
where T2Base : struct, IBaseUnit<T2Base, TNumber>
where T1 : struct, IBaseUnit<T1Base, TNumber>
where T2 : struct, IBaseUnit<T2Base, TNumber>
where TNumber : IDivisionOperators<TNumber, TNumber, TNumber>
{
public TNumber Base => new T1().Base / new T2().Base;
public string Postfix => $"({new T1().Postfix}/{new T2().Postfix})";
}
IBaseUnit{T}.cs:
/// Represents a base unit of measurement with a specific type of quantity.
public interface IBaseUnit<T, TNumber> {
    /// Gets the base value of the quantity.
    TNumber Base { get; }
    /// Gets the postfix used to represent the unit of measurement.
    string Postfix { get; }
}
Unit.cs:
/// Represents a unit of measurement with a floating-point value.
public readonly record struct Unit<T, TBase, TNumber>(TNumber Float)
    where TBase : struct, IBaseUnit<TBase, TNumber>
    where T : struct, IBaseUnit<TBase, TNumber>
    where TNumber : IMultiplyOperators<TNumber, TNumber, TNumber>, IDivisionOperators<TNumber, TNumber, TNumber>
{
    public override string ToString() => $"{Float:0.00} {new T().Postfix}";
    public Unit<TNew, TBase, TNumber> To<TNew>()
        where TNew : struct, IBaseUnit<TBase, TNumber>
        => new(Float * new T().Base / new TNew().Base);
}

PredefinedUnits.Mass.cs:
public struct Kilogram<TNumber> : IBaseUnit<Kilogram<TNumber>, TNumber>
where TNumber : IMultiplicativeIdentity<TNumber, TNumber>
{
public string Postfix => "kg";

public TNumber Base => TNumber.MultiplicativeIdentity;
}

public struct Tonn<TNumber> : IBaseUnit<Kilogram<TNumber>, TNumber>
where TNumber : IMultiplicativeIdentity<TNumber, TNumber>, IParsable<TNumber>
{
public string Postfix => "t";

public TNumber Base => Constants<TNumber>.Number1000;
}

public struct Gram<TNumber> : IBaseUnit<Kilogram<TNumber>, TNumber>
where TNumber : IMultiplicativeIdentity<TNumber, TNumber>, IParsable<TNumber>
{
public string Postfix => "g";

public TNumber Base => Constants<TNumber>.Number0_001;
}

public struct Milligram<TNumber> : IBaseUnit<Kilogram<TNumber>, TNumber>
where TNumber : IMultiplicativeIdentity<TNumber, TNumber>, IParsable<TNumber>
{
public string Postfix => "mg";

public TNumber Base => Constants<TNumber>.Number0_000001;
}


PredefinedUnits.Arithmetics.cs:
public struct Div<T1, T2, T1Base, T2Base, TNumber>
    : IBaseUnit<Div<T1Base, T2Base, T1Base, T2Base, TNumber>, TNumber>
    where T1Base : struct, IBaseUnit<T1Base, TNumber>
    where T2Base : struct, IBaseUnit<T2Base, TNumber>
    where T1 : struct, IBaseUnit<T1Base, TNumber>
    where T2 : struct, IBaseUnit<T2Base, TNumber>
    where TNumber : IDivisionOperators<TNumber, TNumber, TNumber> {
    public TNumber Base => new T1().Base / new T2().Base;
    public string Postfix => $"({new T1().Postfix} / {new T2().Postfix})";
}

public struct Multi<T1, T2, T1Base, T2Base, TNumber>
    : IBaseUnit<Multi<T1Base, T2Base, T1Base, T2Base, TNumber>, TNumber>
    where T1Base : struct, IBaseUnit<T1Base, TNumber>
    where T2Base : struct, IBaseUnit<T2Base, TNumber>
    where T1 : struct, IBaseUnit<T1Base, TNumber>
    where T2 : struct, IBaseUnit<T2Base, TNumber>
    where TNumber : IMultiplyOperators<TNumber, TNumber, TNumber> {
    public TNumber Base => new T1().Base * new T2().Base;
    public string Postfix => $"({new T1().Postfix} * {new T2().Postfix})";
}
UoM.cs:
public static class UoM
{
    public static Unit<Kilogram<T>, Kilogram<T>, T> Kilograms<T>(this T a)
        where T : IMultiplicativeIdentity<T, T>, IParsable<T>, IDivisionOperators<T, T, T>, IMultiplyOperators<T, T, T>
        => new(a);

    public static Unit<Gram<T>, Kilogram<T>, T> Grams<T>(this T a)
        where T : IMultiplicativeIdentity<T, T>, IParsable<T>, IDivisionOperators<T, T, T>, IMultiplyOperators<T, T, T>
        => new(a);

    public static Unit<Milligram<T>, Kilogram<T>, T> Milligrams<T>(this T a)
        where T : IMultiplicativeIdentity<T, T>, IParsable<T>, IDivisionOperators<T, T, T>, IMultiplyOperators<T, T, T>
        => new(a);

    public static Unit<Tonn<T>, Kilogram<T>, T> Tonns<T>(this T a)
        where T : IMultiplicativeIdentity<T, T>, IParsable<T>, IDivisionOperators<T, T, T>, IMultiplyOperators<T, T, T>
        => new(a);
}